{
  "version": 3,
  "sources": ["../../lib/resolve-notion-page.ts"],
  "sourcesContent": ["import { ExtendedRecordMap } from 'notion-types'\nimport { parsePageId } from 'notion-utils'\n\nimport * as acl from './acl'\nimport { environment, pageUrlAdditions, pageUrlOverrides, site } from './config'\nimport { db } from './db'\nimport { getSiteMap } from './get-site-map'\nimport { getPage } from './notion'\n\nexport async function resolveNotionPage(domain: string, rawPageId?: string) {\n  let pageId: string\n  let recordMap: ExtendedRecordMap\n\n  if (rawPageId && rawPageId !== 'index') {\n    pageId = parsePageId(rawPageId)\n\n    if (!pageId) {\n      // check if the site configuration provides an override or a fallback for\n      // the page's URI\n      const override =\n        pageUrlOverrides[rawPageId] || pageUrlAdditions[rawPageId]\n\n      if (override) {\n        pageId = parsePageId(override)\n      }\n    }\n\n    const useUriToPageIdCache = true\n    const cacheKey = `uri-to-page-id:${domain}:${environment}:${rawPageId}`\n    // TODO: should we use a TTL for these mappings or make them permanent?\n    // const cacheTTL = 8.64e7 // one day in milliseconds\n    const cacheTTL = undefined // disable cache TTL\n\n    if (!pageId && useUriToPageIdCache) {\n      try {\n        // check if the database has a cached mapping of this URI to page ID\n        pageId = await db.get(cacheKey)\n\n        // console.log(`redis get \"${cacheKey}\"`, pageId)\n      } catch (err) {\n        // ignore redis errors\n        console.warn(`redis error get \"${cacheKey}\"`, err.message)\n      }\n    }\n\n    if (pageId) {\n      recordMap = await getPage(pageId)\n    } else {\n      // handle mapping of user-friendly canonical page paths to Notion page IDs\n      // e.g., /developer-x-entrepreneur versus /71201624b204481f862630ea25ce62fe\n      const siteMap = await getSiteMap()\n      pageId = siteMap?.canonicalPageMap[rawPageId]\n\n      if (pageId) {\n        // TODO: we're not re-using the page recordMap from siteMaps because it is\n        // cached aggressively\n        // recordMap = siteMap.pageMap[pageId]\n\n        recordMap = await getPage(pageId)\n\n        if (useUriToPageIdCache) {\n          try {\n            // update the database mapping of URI to pageId\n            await db.set(cacheKey, pageId, cacheTTL)\n\n            // console.log(`redis set \"${cacheKey}\"`, pageId, { cacheTTL })\n          } catch (err) {\n            // ignore redis errors\n            console.warn(`redis error set \"${cacheKey}\"`, err.message)\n          }\n        }\n      } else {\n        // note: we're purposefully not caching URI to pageId mappings for 404s\n        return {\n          error: {\n            message: `Not found \"${rawPageId}\"`,\n            statusCode: 404\n          }\n        }\n      }\n    }\n  } else {\n    pageId = site.rootNotionPageId\n\n    console.log(site)\n    recordMap = await getPage(pageId)\n  }\n\n  const props = { site, recordMap, pageId }\n  return { ...props, ...(await acl.pageAcl(props)) }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA4B;AAE5B,UAAqB;AACrB,oBAAsE;AACtE,gBAAmB;AACnB,0BAA2B;AAC3B,oBAAwB;AAExB,eAAsB,kBAAkB,QAAgB,WAAoB;AAC1E,MAAI;AACJ,MAAI;AAEJ,MAAI,aAAa,cAAc,SAAS;AACtC,iBAAS,iCAAY,SAAS;AAE9B,QAAI,CAAC,QAAQ;AAGX,YAAM,WACJ,+BAAiB,cAAc,+BAAiB;AAElD,UAAI,UAAU;AACZ,qBAAS,iCAAY,QAAQ;AAAA,MAC/B;AAAA,IACF;AAEA,UAAM,sBAAsB;AAC5B,UAAM,WAAW,kBAAkB,UAAU,6BAAe;AAG5D,UAAM,WAAW;AAEjB,QAAI,CAAC,UAAU,qBAAqB;AAClC,UAAI;AAEF,iBAAS,MAAM,aAAG,IAAI,QAAQ;AAAA,MAGhC,SAAS,KAAP;AAEA,gBAAQ,KAAK,oBAAoB,aAAa,IAAI,OAAO;AAAA,MAC3D;AAAA,IACF;AAEA,QAAI,QAAQ;AACV,kBAAY,UAAM,uBAAQ,MAAM;AAAA,IAClC,OAAO;AAGL,YAAM,UAAU,UAAM,gCAAW;AACjC,eAAS,mCAAS,iBAAiB;AAEnC,UAAI,QAAQ;AAKV,oBAAY,UAAM,uBAAQ,MAAM;AAEhC,YAAI,qBAAqB;AACvB,cAAI;AAEF,kBAAM,aAAG,IAAI,UAAU,QAAQ,QAAQ;AAAA,UAGzC,SAAS,KAAP;AAEA,oBAAQ,KAAK,oBAAoB,aAAa,IAAI,OAAO;AAAA,UAC3D;AAAA,QACF;AAAA,MACF,OAAO;AAEL,eAAO;AAAA,UACL,OAAO;AAAA,YACL,SAAS,cAAc;AAAA,YACvB,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,OAAO;AACL,aAAS,mBAAK;AAEd,YAAQ,IAAI,kBAAI;AAChB,gBAAY,UAAM,uBAAQ,MAAM;AAAA,EAClC;AAEA,QAAM,QAAQ,EAAE,0BAAM,WAAW,OAAO;AACxC,SAAO,EAAE,GAAG,OAAO,GAAI,MAAM,IAAI,QAAQ,KAAK,EAAG;AACnD;",
  "names": []
}
