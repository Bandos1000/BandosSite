{
  "version": 3,
  "sources": ["../../lib/config.ts"],
  "sourcesContent": ["/**\n * Site-wide app configuration.\n *\n * This file pulls from the root \"site.config.ts\" as well as environment variables\n * for optional depenencies.\n */\nimport { parsePageId } from 'notion-utils'\nimport { PostHogConfig } from 'posthog-js'\n\nimport { getEnv, getSiteConfig } from './get-config-value'\nimport { NavigationLink } from './site-config'\nimport {\n  NavigationStyle,\n  PageUrlOverridesInverseMap,\n  PageUrlOverridesMap,\n  Site\n} from './types'\n\nexport const rootNotionPageId: string = parsePageId(\n  getSiteConfig('rootNotionPageId'),\n  { uuid: false }\n)\n\nif (!rootNotionPageId) {\n  throw new Error('Config error invalid \"rootNotionPageId\"')\n}\n\n// if you want to restrict pages to a single notion workspace (optional)\nexport const rootNotionSpaceId: string | null = parsePageId(\n  getSiteConfig('rootNotionSpaceId', null),\n  { uuid: true }\n)\n\nexport const pageUrlOverrides = cleanPageUrlMap(\n  getSiteConfig('pageUrlOverrides', {}) || {},\n  { label: 'pageUrlOverrides' }\n)\n\nexport const pageUrlAdditions = cleanPageUrlMap(\n  getSiteConfig('pageUrlAdditions', {}) || {},\n  { label: 'pageUrlAdditions' }\n)\n\nexport const inversePageUrlOverrides = invertPageUrlOverrides(pageUrlOverrides)\n\nexport const environment = process.env.NODE_ENV || 'development'\nexport const isDev = environment === 'development'\n\n// general site config\nexport const name: string = getSiteConfig('name')\nexport const author: string = getSiteConfig('author')\nexport const domain: string = getSiteConfig('domain')\nexport const description: string = getSiteConfig('description', 'Notion Blog')\nexport const language: string = getSiteConfig('language', 'en')\n\n// social accounts\nexport const twitter: string | null = getSiteConfig('twitter', null)\nexport const mastodon: string | null = getSiteConfig('mastodon', null)\nexport const github: string | null = getSiteConfig('github', null)\nexport const youtube: string | null = getSiteConfig('youtube', null)\nexport const linkedin: string | null = getSiteConfig('linkedin', null)\nexport const newsletter: string | null = getSiteConfig('newsletter', null)\nexport const zhihu: string | null = getSiteConfig('zhihu', null)\n\nexport const getMastodonHandle = (): string | null => {\n  if (!mastodon) {\n    return null\n  }\n\n  // Since Mastodon is decentralized, handles include the instance domain name.\n  // e.g. @example@mastodon.social\n  const url = new URL(mastodon)\n  return `${url.pathname.slice(1)}@${url.hostname}`\n}\n\n// default notion values for site-wide consistency (optional; may be overridden on a per-page basis)\nexport const defaultPageIcon: string | null = getSiteConfig(\n  'defaultPageIcon',\n  null\n)\nexport const defaultPageCover: string | null = getSiteConfig(\n  'defaultPageCover',\n  null\n)\nexport const defaultPageCoverPosition: number = getSiteConfig(\n  'defaultPageCoverPosition',\n  0.5\n)\n\n// Optional whether or not to enable support for LQIP preview images\nexport const isPreviewImageSupportEnabled: boolean = getSiteConfig(\n  'isPreviewImageSupportEnabled',\n  false\n)\n\n// Optional whether or not to include the Notion ID in page URLs or just use slugs\nexport const includeNotionIdInUrls: boolean = getSiteConfig(\n  'includeNotionIdInUrls',\n  !!isDev\n)\n\nexport const navigationStyle: NavigationStyle = getSiteConfig(\n  'navigationStyle',\n  'default'\n)\n\nexport const navigationLinks: Array<NavigationLink | null> = getSiteConfig(\n  'navigationLinks',\n  null\n)\n\n// Optional site search\nexport const isSearchEnabled: boolean = getSiteConfig('isSearchEnabled', true)\n\n// ----------------------------------------------------------------------------\n\n// Optional redis instance for persisting preview images\nexport const isRedisEnabled: boolean =\n  getSiteConfig('isRedisEnabled', false) || !!getEnv('REDIS_ENABLED', null)\n\n// (if you want to enable redis, only REDIS_HOST and REDIS_PASSWORD are required)\n// we recommend that you store these in a local `.env` file\nexport const redisHost: string | null = getEnv('REDIS_HOST', null)\nexport const redisPassword: string | null = getEnv('REDIS_PASSWORD', null)\nexport const redisUser: string = getEnv('REDIS_USER', 'default')\nexport const redisUrl = getEnv(\n  'REDIS_URL',\n  `redis://${redisUser}:${redisPassword}@${redisHost}`\n)\nexport const redisNamespace: string | null = getEnv(\n  'REDIS_NAMESPACE',\n  'preview-images'\n)\n\n// ----------------------------------------------------------------------------\n\nexport const isServer = typeof window === 'undefined'\n\nexport const port = getEnv('PORT', '3000')\nexport const host = isDev ? `http://localhost:${port}` : `https://${domain}`\nexport const apiHost = isDev\n  ? host\n  : `https://${process.env.VERCEL_URL || domain}`\n\nexport const apiBaseUrl = `/api`\n\nexport const api = {\n  searchNotion: `${apiBaseUrl}/search-notion`,\n  getNotionPageInfo: `${apiBaseUrl}/notion-page-info`,\n  getSocialImage: `${apiBaseUrl}/social-image`\n}\n\n// ----------------------------------------------------------------------------\n\nexport const site: Site = {\n  domain,\n  name,\n  rootNotionPageId,\n  rootNotionSpaceId,\n  description\n}\n\nexport const fathomId = isDev ? null : process.env.NEXT_PUBLIC_FATHOM_ID\nexport const fathomConfig = fathomId\n  ? {\n      excludedDomains: ['localhost', 'localhost:3000']\n    }\n  : undefined\n\nexport const posthogId = process.env.NEXT_PUBLIC_POSTHOG_ID\nexport const posthogConfig: Partial<PostHogConfig> = {\n  api_host: 'https://app.posthog.com'\n}\n\nfunction cleanPageUrlMap(\n  pageUrlMap: PageUrlOverridesMap,\n  {\n    label\n  }: {\n    label: string\n  }\n): PageUrlOverridesMap {\n  return Object.keys(pageUrlMap).reduce((acc, uri) => {\n    const pageId = pageUrlMap[uri]\n    const uuid = parsePageId(pageId, { uuid: false })\n\n    if (!uuid) {\n      throw new Error(`Invalid ${label} page id \"${pageId}\"`)\n    }\n\n    if (!uri) {\n      throw new Error(`Missing ${label} value for page \"${pageId}\"`)\n    }\n\n    if (!uri.startsWith('/')) {\n      throw new Error(\n        `Invalid ${label} value for page \"${pageId}\": value \"${uri}\" should be a relative URI that starts with \"/\"`\n      )\n    }\n\n    const path = uri.slice(1)\n\n    return {\n      ...acc,\n      [path]: uuid\n    }\n  }, {})\n}\n\nfunction invertPageUrlOverrides(\n  pageUrlOverrides: PageUrlOverridesMap\n): PageUrlOverridesInverseMap {\n  return Object.keys(pageUrlOverrides).reduce((acc, uri) => {\n    const pageId = pageUrlOverrides[uri]\n\n    return {\n      ...acc,\n      [pageId]: uri\n    }\n  }, {})\n}\n"],
  "mappings": "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",
  "names": ["pageUrlOverrides"]
}
