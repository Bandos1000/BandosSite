{
  "version": 3,
  "sources": ["../../lib/search-notion.ts"],
  "sourcesContent": ["// import ky from 'ky'\nimport ExpiryMap from 'expiry-map'\nimport fetch from 'isomorphic-unfetch'\nimport pMemoize from 'p-memoize'\n\nimport * as types from './types'\nimport { api } from './config'\n\nexport const searchNotion = pMemoize(searchNotionImpl, {\n  cacheKey: (args) => args[0]?.query,\n  cache: new ExpiryMap(10000)\n})\n\nasync function searchNotionImpl(\n  params: types.SearchParams\n): Promise<types.SearchResults> {\n  return fetch(api.searchNotion, {\n    method: 'POST',\n    body: JSON.stringify(params),\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res\n      }\n\n      // convert non-2xx HTTP responses into errors\n      const error: any = new Error(res.statusText)\n      error.response = res\n      return Promise.reject(error)\n    })\n    .then((res) => res.json())\n\n  // return ky\n  //   .post(api.searchNotion, {\n  //     json: params\n  //   })\n  //   .json()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAsB;AACtB,gCAAkB;AAClB,uBAAqB;AAGrB,oBAAoB;AAEb,MAAM,mBAAe,iBAAAA,SAAS,kBAAkB;AAAA,EACrD,UAAU,CAAC,SAAM;AATnB;AASsB,sBAAK,OAAL,mBAAS;AAAA;AAAA,EAC7B,OAAO,IAAI,kBAAAC,QAAU,GAAK;AAC5B,CAAC;AAED,eAAe,iBACb,QAC8B;AAC9B,aAAO,0BAAAC,SAAM,kBAAI,cAAc;AAAA,IAC7B,QAAQ;AAAA,IACR,MAAM,KAAK,UAAU,MAAM;AAAA,IAC3B,SAAS;AAAA,MACP,gBAAgB;AAAA,IAClB;AAAA,EACF,CAAC,EACE,KAAK,CAAC,QAAQ;AACb,QAAI,IAAI,IAAI;AACV,aAAO;AAAA,IACT;AAGA,UAAM,QAAa,IAAI,MAAM,IAAI,UAAU;AAC3C,UAAM,WAAW;AACjB,WAAO,QAAQ,OAAO,KAAK;AAAA,EAC7B,CAAC,EACA,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC;AAO7B;",
  "names": ["pMemoize", "ExpiryMap", "fetch"]
}
