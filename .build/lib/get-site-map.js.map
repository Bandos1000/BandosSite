{
  "version": 3,
  "sources": ["../../lib/get-site-map.ts"],
  "sourcesContent": ["import { getAllPagesInSpace, uuidToId } from 'notion-utils'\nimport pMemoize from 'p-memoize'\n\nimport * as config from './config'\nimport * as types from './types'\nimport { includeNotionIdInUrls } from './config'\nimport { getCanonicalPageId } from './get-canonical-page-id'\nimport { notion } from './notion-api'\n\nconst uuid = !!includeNotionIdInUrls\n\nexport async function getSiteMap(): Promise<types.SiteMap> {\n  const partialSiteMap = await getAllPages(\n    config.rootNotionPageId,\n    config.rootNotionSpaceId\n  )\n\n  return {\n    site: config.site,\n    ...partialSiteMap\n  } as types.SiteMap\n}\n\nconst getAllPages = pMemoize(getAllPagesImpl, {\n  cacheKey: (...args) => JSON.stringify(args)\n})\n\nasync function getAllPagesImpl(\n  rootNotionPageId: string,\n  rootNotionSpaceId: string\n): Promise<Partial<types.SiteMap>> {\n  const getPage = async (pageId: string, ...args) => {\n    console.log('\\nnotion getPage', uuidToId(pageId))\n    return notion.getPage(pageId, ...args)\n  }\n\n  const pageMap = await getAllPagesInSpace(\n    rootNotionPageId,\n    rootNotionSpaceId,\n    getPage\n  )\n\n  const canonicalPageMap = Object.keys(pageMap).reduce(\n    (map, pageId: string) => {\n      const recordMap = pageMap[pageId]\n      if (!recordMap) {\n        throw new Error(`Error loading page \"${pageId}\"`)\n      }\n\n      const canonicalPageId = getCanonicalPageId(pageId, recordMap, {\n        uuid\n      })\n\n      if (map[canonicalPageId]) {\n        // you can have multiple pages in different collections that have the same id\n        // TODO: we may want to error if neither entry is a collection page\n        console.warn('error duplicate canonical page id', {\n          canonicalPageId,\n          pageId,\n          existingPageId: map[canonicalPageId]\n        })\n\n        return map\n      } else {\n        return {\n          ...map,\n          [canonicalPageId]: pageId\n        }\n      }\n    },\n    {}\n  )\n\n  return {\n    pageMap,\n    canonicalPageMap\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6C;AAC7C,uBAAqB;AAErB,aAAwB;AAExB,oBAAsC;AACtC,mCAAmC;AACnC,wBAAuB;AAEvB,MAAM,OAAO,CAAC,CAAC;AAEf,eAAsB,aAAqC;AACzD,QAAM,iBAAiB,MAAM;AAAA,IAC3B,OAAO;AAAA,IACP,OAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL,MAAM,OAAO;AAAA,IACb,GAAG;AAAA,EACL;AACF;AAEA,MAAM,kBAAc,iBAAAA,SAAS,iBAAiB;AAAA,EAC5C,UAAU,IAAI,SAAS,KAAK,UAAU,IAAI;AAC5C,CAAC;AAED,eAAe,gBACb,kBACA,mBACiC;AACjC,QAAM,UAAU,OAAO,WAAmB,SAAS;AACjD,YAAQ,IAAI,wBAAoB,8BAAS,MAAM,CAAC;AAChD,WAAO,yBAAO,QAAQ,QAAQ,GAAG,IAAI;AAAA,EACvC;AAEA,QAAM,UAAU,UAAM;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,mBAAmB,OAAO,KAAK,OAAO,EAAE;AAAA,IAC5C,CAAC,KAAK,WAAmB;AACvB,YAAM,YAAY,QAAQ;AAC1B,UAAI,CAAC,WAAW;AACd,cAAM,IAAI,MAAM,uBAAuB,SAAS;AAAA,MAClD;AAEA,YAAM,sBAAkB,iDAAmB,QAAQ,WAAW;AAAA,QAC5D;AAAA,MACF,CAAC;AAED,UAAI,IAAI,kBAAkB;AAGxB,gBAAQ,KAAK,qCAAqC;AAAA,UAChD;AAAA,UACA;AAAA,UACA,gBAAgB,IAAI;AAAA,QACtB,CAAC;AAED,eAAO;AAAA,MACT,OAAO;AACL,eAAO;AAAA,UACL,GAAG;AAAA,UACH,CAAC,kBAAkB;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["pMemoize"]
}
