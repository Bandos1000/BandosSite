{
  "version": 3,
  "sources": ["../../lib/preview-images.ts"],
  "sourcesContent": ["import got from 'got'\nimport lqip from 'lqip-modern'\nimport { ExtendedRecordMap, PreviewImage, PreviewImageMap } from 'notion-types'\nimport { getPageImageUrls, normalizeUrl } from 'notion-utils'\nimport pMap from 'p-map'\nimport pMemoize from 'p-memoize'\n\nimport { defaultPageCover, defaultPageIcon } from './config'\nimport { db } from './db'\nimport { mapImageUrl } from './map-image-url'\n\nexport async function getPreviewImageMap(\n  recordMap: ExtendedRecordMap\n): Promise<PreviewImageMap> {\n  const urls: string[] = getPageImageUrls(recordMap, {\n    mapImageUrl\n  })\n    .concat([defaultPageIcon, defaultPageCover])\n    .filter(Boolean)\n\n  const previewImagesMap = Object.fromEntries(\n    await pMap(\n      urls,\n      async (url) => {\n        const cacheKey = normalizeUrl(url)\n        return [cacheKey, await getPreviewImage(url, { cacheKey })]\n      },\n      {\n        concurrency: 8\n      }\n    )\n  )\n\n  return previewImagesMap\n}\n\nasync function createPreviewImage(\n  url: string,\n  { cacheKey }: { cacheKey: string }\n): Promise<PreviewImage | null> {\n  try {\n    try {\n      const cachedPreviewImage = await db.get(cacheKey)\n      if (cachedPreviewImage) {\n        return cachedPreviewImage\n      }\n    } catch (err) {\n      // ignore redis errors\n      console.warn(`redis error get \"${cacheKey}\"`, err.message)\n    }\n\n    const { body } = await got(url, { responseType: 'buffer' })\n    const result = await lqip(body)\n    console.log('lqip', { ...result.metadata, url, cacheKey })\n\n    const previewImage = {\n      originalWidth: result.metadata.originalWidth,\n      originalHeight: result.metadata.originalHeight,\n      dataURIBase64: result.metadata.dataURIBase64\n    }\n\n    try {\n      await db.set(cacheKey, previewImage)\n    } catch (err) {\n      // ignore redis errors\n      console.warn(`redis error set \"${cacheKey}\"`, err.message)\n    }\n\n    return previewImage\n  } catch (err) {\n    console.warn('failed to create preview image', url, err.message)\n    return null\n  }\n}\n\nexport const getPreviewImage = pMemoize(createPreviewImage)\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAChB,yBAAiB;AAEjB,0BAA+C;AAC/C,mBAAiB;AACjB,uBAAqB;AAErB,oBAAkD;AAClD,gBAAmB;AACnB,2BAA4B;AAE5B,eAAsB,mBACpB,WAC0B;AAC1B,QAAM,WAAiB,sCAAiB,WAAW;AAAA,IACjD;AAAA,EACF,CAAC,EACE,OAAO,CAAC,+BAAiB,8BAAgB,CAAC,EAC1C,OAAO,OAAO;AAEjB,QAAM,mBAAmB,OAAO;AAAA,IAC9B,UAAM,aAAAA;AAAA,MACJ;AAAA,MACA,OAAO,QAAQ;AACb,cAAM,eAAW,kCAAa,GAAG;AACjC,eAAO,CAAC,UAAU,MAAM,gBAAgB,KAAK,EAAE,SAAS,CAAC,CAAC;AAAA,MAC5D;AAAA,MACA;AAAA,QACE,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,eAAe,mBACb,KACA,EAAE,SAAS,GACmB;AAC9B,MAAI;AACF,QAAI;AACF,YAAM,qBAAqB,MAAM,aAAG,IAAI,QAAQ;AAChD,UAAI,oBAAoB;AACtB,eAAO;AAAA,MACT;AAAA,IACF,SAAS,KAAP;AAEA,cAAQ,KAAK,oBAAoB,aAAa,IAAI,OAAO;AAAA,IAC3D;AAEA,UAAM,EAAE,KAAK,IAAI,UAAM,WAAAC,SAAI,KAAK,EAAE,cAAc,SAAS,CAAC;AAC1D,UAAM,SAAS,UAAM,mBAAAC,SAAK,IAAI;AAC9B,YAAQ,IAAI,QAAQ,EAAE,GAAG,OAAO,UAAU,KAAK,SAAS,CAAC;AAEzD,UAAM,eAAe;AAAA,MACnB,eAAe,OAAO,SAAS;AAAA,MAC/B,gBAAgB,OAAO,SAAS;AAAA,MAChC,eAAe,OAAO,SAAS;AAAA,IACjC;AAEA,QAAI;AACF,YAAM,aAAG,IAAI,UAAU,YAAY;AAAA,IACrC,SAAS,KAAP;AAEA,cAAQ,KAAK,oBAAoB,aAAa,IAAI,OAAO;AAAA,IAC3D;AAEA,WAAO;AAAA,EACT,SAAS,KAAP;AACA,YAAQ,KAAK,kCAAkC,KAAK,IAAI,OAAO;AAC/D,WAAO;AAAA,EACT;AACF;AAEO,MAAM,sBAAkB,iBAAAC,SAAS,kBAAkB;",
  "names": ["pMap", "got", "lqip", "pMemoize"]
}
