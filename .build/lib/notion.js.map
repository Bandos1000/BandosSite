{
  "version": 3,
  "sources": ["../../lib/notion.ts"],
  "sourcesContent": ["import { ExtendedRecordMap, SearchParams, SearchResults } from 'notion-types'\nimport { mergeRecordMaps } from 'notion-utils'\nimport pMap from 'p-map'\nimport pMemoize from 'p-memoize'\n\nimport {\n  isPreviewImageSupportEnabled,\n  navigationLinks,\n  navigationStyle\n} from './config'\nimport { notion } from './notion-api'\nimport { getPreviewImageMap } from './preview-images'\n\nconst getNavigationLinkPages = pMemoize(\n  async (): Promise<ExtendedRecordMap[]> => {\n    const navigationLinkPageIds = (navigationLinks || [])\n      .map((link) => link.pageId)\n      .filter(Boolean)\n\n    if (navigationStyle !== 'default' && navigationLinkPageIds.length) {\n      return pMap(\n        navigationLinkPageIds,\n        async (navigationLinkPageId) =>\n          notion.getPage(navigationLinkPageId, {\n            chunkLimit: 1,\n            fetchMissingBlocks: false,\n            fetchCollections: false,\n            signFileUrls: false\n          }),\n        {\n          concurrency: 4\n        }\n      )\n    }\n\n    return []\n  }\n)\n\nexport async function getPage(pageId: string): Promise<ExtendedRecordMap> {\n  let recordMap = await notion.getPage(pageId)\n\n  if (navigationStyle !== 'default') {\n    // ensure that any pages linked to in the custom navigation header have\n    // their block info fully resolved in the page record map so we know\n    // the page title, slug, etc.\n    const navigationLinkRecordMaps = await getNavigationLinkPages()\n\n    if (navigationLinkRecordMaps?.length) {\n      recordMap = navigationLinkRecordMaps.reduce(\n        (map, navigationLinkRecordMap) =>\n          mergeRecordMaps(map, navigationLinkRecordMap),\n        recordMap\n      )\n    }\n  }\n\n  if (isPreviewImageSupportEnabled) {\n    const previewImageMap = await getPreviewImageMap(recordMap)\n    ;(recordMap as any).preview_images = previewImageMap\n  }\n\n  return recordMap\n}\n\nexport async function search(params: SearchParams): Promise<SearchResults> {\n  return notion.search(params)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAgC;AAChC,mBAAiB;AACjB,uBAAqB;AAErB,oBAIO;AACP,wBAAuB;AACvB,4BAAmC;AAEnC,MAAM,6BAAyB,iBAAAA;AAAA,EAC7B,YAA0C;AACxC,UAAM,yBAAyB,iCAAmB,CAAC,GAChD,IAAI,CAAC,SAAS,KAAK,MAAM,EACzB,OAAO,OAAO;AAEjB,QAAI,kCAAoB,aAAa,sBAAsB,QAAQ;AACjE,iBAAO,aAAAC;AAAA,QACL;AAAA,QACA,OAAO,yBACL,yBAAO,QAAQ,sBAAsB;AAAA,UACnC,YAAY;AAAA,UACZ,oBAAoB;AAAA,UACpB,kBAAkB;AAAA,UAClB,cAAc;AAAA,QAChB,CAAC;AAAA,QACH;AAAA,UACE,aAAa;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAEA,WAAO,CAAC;AAAA,EACV;AACF;AAEA,eAAsB,QAAQ,QAA4C;AACxE,MAAI,YAAY,MAAM,yBAAO,QAAQ,MAAM;AAE3C,MAAI,kCAAoB,WAAW;AAIjC,UAAM,2BAA2B,MAAM,uBAAuB;AAE9D,QAAI,qEAA0B,QAAQ;AACpC,kBAAY,yBAAyB;AAAA,QACnC,CAAC,KAAK,gCACJ,qCAAgB,KAAK,uBAAuB;AAAA,QAC9C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,4CAA8B;AAChC,UAAM,kBAAkB,UAAM,0CAAmB,SAAS;AACzD,IAAC,UAAkB,iBAAiB;AAAA,EACvC;AAEA,SAAO;AACT;AAEA,eAAsB,OAAO,QAA8C;AACzE,SAAO,yBAAO,OAAO,MAAM;AAC7B;",
  "names": ["pMemoize", "pMap"]
}
